#include "utilities_sys.h"

///==================================================================================================================================================================================
///	Подключение стандартных библиотек и макросов
///==================================================================================================================================================================================
#include <chrono>
#include <thread>
#include <fstream>
#include <errno.h>

#ifdef WINDOWS_COMPILER
	#include <windows.h>
#else
	#include <unistd.h>
	#include <string.h>
	#include <sys/time.h>
	#include <termios.h>	
	#include <fcntl.h>
	#include <sys/ioctl.h>
#endif

///==================================================================================================================================================================================
///	Подключение сторонних библиотек и макросов
///==================================================================================================================================================================================
#include "return.h"


///==================================================================================================================================================================================
///	Обработка системных сообщений
///==================================================================================================================================================================================

int LastSystemError() 
//==============================================================================================================================================
//	Функция:	LastSystemError() 
//==============================================================================================================================================
//	Функция получения кода последней системной ошибки
//==============================================================================================================================================
//  Переменные:
//==============================================================================================================================================
//	Возвращаемое значение функции: Код последней системной ошибки
//==============================================================================================================================================
//	Дата:	13.06.2021
//==============================================================================================================================================
//	Последнее обновление:	13.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "LAST SYSTEM ERROR:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Получение последней системной ошибки
	//------------------------------------------------------------------------------------------------------------------------------------------
#ifdef WINDOWS_COMPILER
	return GetLastError();
#else
	return errno;
#endif

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

template <typename T> void GetErrorTextTemplate(T wsaError, std::string &ErrorText)
//==============================================================================================================================================
//	Программа:	GetErrorTextTemplate(T wsaError, std::string &ErrorText)
//==============================================================================================================================================
//	Шаблон программы получения текста системной ошибки
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	wsaError	-	Код системной ошибки
//	ErrorText	-	Текст системной ошибки
//==============================================================================================================================================
//	Возвращаемое значение функции:
//==============================================================================================================================================
//	Дата: 13.06.2021
//==============================================================================================================================================
//	Последнее обновление:	13.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "GET ERROR TEXT TEMPLATE:";
	size_t i = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Очистка данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	ErrorText.clear();
	if (wsaError < RETURN_OK) {
		ErrorText = "Wrong Error code.";
		return; }

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Получение текста ошибки
	//------------------------------------------------------------------------------------------------------------------------------------------
#ifdef WINDOWS_COMPILER
	DWORD size = RETURN_OK;
	LPCSTR lpMsgStr;
	LPVOID lpMsgBuf;
	size = FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
		NULL,
		DWORD(wsaError),
		MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US),
		(LPTSTR)&lpMsgBuf,
		0, NULL);
	if (size <= RETURN_OK) return;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Формирование строки сообщения
	//------------------------------------------------------------------------------------------------------------------------------------------
	lpMsgStr = (LPCSTR)lpMsgBuf;
	ErrorText = std::string(lpMsgStr, lpMsgStr + size);
	LocalFree(lpMsgBuf);
#else
	ErrorText = std::string(strerror(int(wsaError)));
#endif

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Форматирование строки сообщения
	//------------------------------------------------------------------------------------------------------------------------------------------
	for (i = 0; i < ErrorText.size(); i++) if (ErrorText[i] == '\n' || ErrorText[i] == '\t' || ErrorText[i] == '\r') {
		ErrorText.erase(i, 1);
		i--; }

	//------------------------------------------------------------------------------------------------------------------------------------------
	//  Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void GetErrorText(long wsaError, std::string &ErrorText) 
{ GetErrorTextTemplate(wsaError, ErrorText); }

void GetErrorText(int8_t wsaError, std::string &ErrorText)
{ GetErrorTextTemplate(wsaError, ErrorText); }

void GetErrorText(int16_t wsaError, std::string &ErrorText)
{ GetErrorTextTemplate(wsaError, ErrorText); }

void GetErrorText(int32_t wsaError, std::string &ErrorText)
{ GetErrorTextTemplate(wsaError, ErrorText); }

#ifdef WINDOWS_COMPILER
	void GetErrorText(int64_t wsaError, std::string &ErrorText)
{ GetErrorTextTemplate(wsaError, ErrorText); }
#endif

void GetErrorText(uint8_t wsaError, std::string &ErrorText)
{ GetErrorTextTemplate(wsaError, ErrorText); }

void GetErrorText(uint16_t wsaError, std::string &ErrorText)
{ GetErrorTextTemplate(wsaError, ErrorText); }

void GetErrorText(uint32_t wsaError, std::string &ErrorText)
{ GetErrorTextTemplate(wsaError, ErrorText); }

void GetErrorText(uint64_t wsaError, std::string &ErrorText)
{ GetErrorTextTemplate(wsaError, ErrorText); }


template <typename T> void GetErrorCharTemplate(T wsaError, char* ErrorText)
//==============================================================================================================================================
//	Программа:	GetErrorCharTemplate(T wsaError, char* ErrorText)
//==============================================================================================================================================
//	Шаблон программы получения текста системной ошибки
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	wsaError	-	Код системной ошибки
//	ErrorText	-	Текст системной ошибки
//==============================================================================================================================================
//	Возвращаемое значение функции:
//==============================================================================================================================================
//	Дата: 13.06.2021
//==============================================================================================================================================
//	Последнее обновление:	13.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "GET ERROR CHAR TEMPLATE:";
	std::string Template = "";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Получение текста ошибки
	//------------------------------------------------------------------------------------------------------------------------------------------
	GetErrorText(wsaError, Template);
	ErrorText = (char*) (Template.c_str());

	//------------------------------------------------------------------------------------------------------------------------------------------
	//  Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void GetErrorText(long wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }

void GetErrorText(int8_t wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }

void GetErrorText(int16_t wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }

void GetErrorText(int32_t wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }

#ifdef WINDOWS_COMPILER
	void GetErrorText(int64_t wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }
#endif

void GetErrorText(uint8_t wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }

void GetErrorText(uint16_t wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }

void GetErrorText(uint32_t wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }

void GetErrorText(uint64_t wsaError, char* ErrorText)
{ GetErrorCharTemplate(wsaError, ErrorText); }


template <typename T> std::string LastErrorStringTemplate(T wsaError)
//==============================================================================================================================================
//	Программа:	LastErrorStringTemplate(T wsaError)
//==============================================================================================================================================
//	Шаблон программы получения текста системной ошибки
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	wsaError	-	Код системной ошибки
//	ErrorText	-	Текст системной ошибки
//==============================================================================================================================================
//	Возвращаемое значение функции:
//==============================================================================================================================================
//	Дата: 13.06.2021
//==============================================================================================================================================
//	Последнее обновление:	13.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "LAST ERROR STRING TEMPLATE:";
	std::string Template = "";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Получение текста ошибки
	//------------------------------------------------------------------------------------------------------------------------------------------
	GetErrorText(wsaError, Template);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//  Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return Template;
}

std::string LastErrorString(long wsaError) 
{ return LastErrorStringTemplate(wsaError); }

std::string LastErrorString(int8_t wsaError)
{ return LastErrorStringTemplate(wsaError); }

std::string LastErrorString(int16_t wsaError)
{ return LastErrorStringTemplate(wsaError); }

std::string LastErrorString(int32_t wsaError)
{ return LastErrorStringTemplate(wsaError); }

#ifdef WINDOWS_COMPILER
	std::string LastErrorString(int64_t wsaError)
{ return LastErrorStringTemplate(wsaError); }
#endif

std::string LastErrorString(uint8_t wsaError)
{ return LastErrorStringTemplate(wsaError); }

std::string LastErrorString(uint16_t wsaError)
{ return LastErrorStringTemplate(wsaError); }

std::string LastErrorString(uint32_t wsaError)
{ return LastErrorStringTemplate(wsaError); }

std::string LastErrorString(uint64_t wsaError)
{ return LastErrorStringTemplate(wsaError); }


template <typename T> char* LastErrorTextTemplate(T wsaError)
//==============================================================================================================================================
//	Программа:	LastErrorTextTemplate(T wsaError)
//==============================================================================================================================================
//	Шаблон программы получения текста системной ошибки
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	wsaError	-	Код системной ошибки
//	ErrorText	-	Текст системной ошибки
//==============================================================================================================================================
//	Возвращаемое значение функции:
//==============================================================================================================================================
//	Дата: 13.06.2021
//==============================================================================================================================================
//	Последнее обновление:	13.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "LAST ERROR TEXT TEMPLATE:";
	std::string Template;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Получение текста ошибки
	//------------------------------------------------------------------------------------------------------------------------------------------
	GetErrorText(wsaError, Template);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//  Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return (char*) Template.c_str();
}

char* LastErrorText(long wsaError)
{ return LastErrorTextTemplate(wsaError); }

char* LastErrorText(int8_t wsaError)
{ return LastErrorTextTemplate(wsaError); }

char* LastErrorText(int16_t wsaError)
{ return LastErrorTextTemplate(wsaError); }

char* LastErrorText(int32_t wsaError)
{ return LastErrorTextTemplate(wsaError); }

#ifdef WINDOWS_COMPILER
	char* LastErrorText(int64_t wsaError)
{ return LastErrorTextTemplate(wsaError); }
#endif

char* LastErrorText(uint8_t wsaError)
{ return LastErrorTextTemplate(wsaError); }

char* LastErrorText(uint16_t wsaError)
{ return LastErrorTextTemplate(wsaError); }

char* LastErrorText(uint32_t wsaError)
{ return LastErrorTextTemplate(wsaError); }

char* LastErrorText(uint64_t wsaError)
{ return LastErrorTextTemplate(wsaError); }


///==================================================================================================================================================================================
///	Операции со временем
///==================================================================================================================================================================================

long Microseconds()
//==============================================================================================================================================
//	Функция:	Microseconds()
//==============================================================================================================================================
//	Функция возвращает количество микросекунд в системном времени
//==============================================================================================================================================
//  Переменные:
//==============================================================================================================================================
//	Возвращаемое значение функции: Количество микросекунд
//==============================================================================================================================================
//	Дата:	09.04.2020
//==============================================================================================================================================
//	Последнее обновление:	09.04.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "MICROSECONDS:";
	long usec = RETURN_OK;

#ifdef WINDOWS_COMPILER
	static const uint64_t EPOCH = ((uint64_t)116444736000000000ULL);
	SYSTEMTIME  system_time;
	FILETIME    file_time;
	uint64_t    time;

	GetSystemTime(&system_time);
	SystemTimeToFileTime(&system_time, &file_time);
	time = ((uint64_t)file_time.dwLowDateTime);
	time += ((uint64_t)file_time.dwHighDateTime) << 32;
	usec = (long)(system_time.wMilliseconds * 1000);
#else
	struct timeval Time;

	gettimeofday(&Time, NULL);
	usec = (long)(Time.tv_usec);
#endif

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return usec;
}

double DoubleTime()
//==============================================================================================================================================
//  Функция: DoubleTime()
//==============================================================================================================================================
//  Функция возвращает текущее время в UNIX формате в виде числа с плавающей точкой
//==============================================================================================================================================
//  Переменные:
//==============================================================================================================================================
//  Возвращаемое значение функции:	Текущее время
//==============================================================================================================================================
//  Дата:	09.04.2020
//==============================================================================================================================================
//  Последнее обновление:   09.04.2020  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "DOUBLE TIME:";

	long usec = RETURN_OK;
	double Time = RETURN_OK;
	time_t sec;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Формирование времени
	//------------------------------------------------------------------------------------------------------------------------------------------
	sec = time(NULL);
	usec = Microseconds();
	Time = (double)sec + (double)(usec) / 1000000;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return Time;
}

template <typename T> void delayTemplate(T Milisec)
//==============================================================================================================================================
//	Функция:	delayTemplate(T Milisec)
//==============================================================================================================================================
//	Шаблон функции задержки работы программы
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Milisec	-	Задержка миллисекунды
//==============================================================================================================================================
//	Возвращаемое значение функции:	Преобразованное число
//==============================================================================================================================================
//	Дата: 07.04.2021
//==============================================================================================================================================
//	Последнее обновление:	07.04.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "DELAY TEMPLATE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Задержка потока
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (Milisec <= RETURN_OK) return;
	std::this_thread::sleep_for(std::chrono::milliseconds(Milisec));

	//------------------------------------------------------------------------------------------------------------------------------------------
	//  Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void Delay(long Milisec) 
{ delayTemplate(Milisec);}

void Delay(int8_t Milisec) 
{ delayTemplate(Milisec); }

void Delay(int16_t Milisec) 
{ delayTemplate(Milisec); }

void Delay(int32_t Milisec) 
{ delayTemplate(Milisec); }

#ifdef WINDOWS_COMPILER
	void Delay(int64_t Milisec) 
{ delayTemplate(Milisec); }
#endif

void Delay(uint8_t Milisec) 
{ delayTemplate(Milisec); }

void Delay(uint16_t Milisec) 
{ delayTemplate(Milisec); }

void Delay(uint32_t Milisec) 
{ delayTemplate(Milisec); }

void Delay(uint64_t Milisec) 
{ delayTemplate(Milisec); }

void delay(long Milisec) 
{ delayTemplate(Milisec);
	return; }

void delay(int8_t Milisec) 
{ delayTemplate(Milisec);
	return; }

void delay(int16_t Milisec) 
{ delayTemplate(Milisec);
	return; }

void delay(int32_t Milisec) 
{ delayTemplate(Milisec);
	return; }

#ifdef WINDOWS_COMPILER
	void delay(int64_t Milisec) 
{ delayTemplate(Milisec);
	return; }
#endif
void delay(uint8_t Milisec) 
{ delayTemplate(Milisec);
	return; }

void delay(uint16_t Milisec) 
{ delayTemplate(Milisec);
	return; }

void delay(uint32_t Milisec) 
{ delayTemplate(Milisec);
	return; }

void delay(uint64_t Milisec) 
{ delayTemplate(Milisec);
	return; }

template <typename T> void waitTemplate(T Microsec)
//==============================================================================================================================================
//	Функция:	waitTemplate(T Microsec)
//==============================================================================================================================================
//	Шаблон функции задержки работы программы
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Microsec	-	Задержка микросекунды
//==============================================================================================================================================
//	Возвращаемое значение функции:	Преобразованное число
//==============================================================================================================================================
//	Дата: 08.06.2021
//==============================================================================================================================================
//	Последнее обновление:	08.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "WAIT TEMPLATE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Задержка потока
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (Microsec <= RETURN_OK) return;
	std::this_thread::sleep_for(std::chrono::microseconds(Microsec));

	//------------------------------------------------------------------------------------------------------------------------------------------
	//  Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void wait(long Microsec)
{ waitTemplate(Microsec);
	return; }

void wait(int8_t Microsec)
{ waitTemplate(Microsec);
	return; }

void wait(int16_t Microsec)
{ waitTemplate(Microsec);
	return; }

void wait(int32_t Microsec)
{ waitTemplate(Microsec);
	return; }

#ifdef WINDOWS_COMPILER
	void wait(int64_t Microsec)
{ waitTemplate(Microsec);
	return; }
#endif

void wait(uint8_t Microsec)
{ waitTemplate(Microsec);
	return; }

void wait(uint16_t Microsec)
{ waitTemplate(Microsec);
	return; }

void wait(uint32_t Microsec)
{ waitTemplate(Microsec);
	return; }

void wait(uint64_t Microsec)
{ waitTemplate(Microsec);
	return; }


///==================================================================================================================================================================================
///	Обработка сигналов клавиатуры для UNIX систем
///==================================================================================================================================================================================
#ifndef WINDOWS_COMPILER

int _getch()
//==============================================================================================================================================
//  Функция getch 
//==============================================================================================================================================
//  Аналог функции getch для LINUX
//==============================================================================================================================================
//  Переменные:
//==============================================================================================================================================
//  Возвращаемое значение функции: Символ нажатой клавиши
//==============================================================================================================================================
//  Дата: 21.11.2017
//==============================================================================================================================================
//  Последнее обновление:   21.11.2017  |
//==============================================================================================================================================
{
	std::string NAME = "_GETCH:";

	int ch;
	struct termios oldt, newt;


	tcgetattr(STDIN_FILENO, &oldt);
	newt = oldt;
	newt.c_lflag &= ~(ICANON | ECHO);
	tcsetattr(STDIN_FILENO, TCSANOW, &newt);
	ch = getchar();
	tcsetattr(STDIN_FILENO, TCSANOW, &oldt);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return ch;
}

int _kbhit()
//==============================================================================================================================================
//  Функция kbhit()
//==============================================================================================================================================
//  Аналог функции kbhit() для LINUX
//==============================================================================================================================================
//	Переменные:
//==============================================================================================================================================
//  Возвращаемое значение функции: Нажатие клавиши
//==============================================================================================================================================
//  Дата: 21.11.2017
//==============================================================================================================================================
//  Последнее обновление:   21.11.2017  |
//==============================================================================================================================================
{
	std::string NAME = "_KBHIT:";

	int bytesWaiting;
	static const int STDIN = 0;
	static bool initialized = false;


	if (!initialized) {
		// Use termios to turn off line buffering
		termios term;
		tcgetattr(STDIN, &term);
		term.c_lflag &= ~ICANON;
		tcsetattr(STDIN, TCSANOW, &term);
		setbuf(stdin, NULL);
		initialized = true;
	}
	ioctl(STDIN, FIONREAD, &bytesWaiting);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return bytesWaiting;
}

#endif


///==================================================================================================================================================================================
///	Конец файла
///==================================================================================================================================================================================
