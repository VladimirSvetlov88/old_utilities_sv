#include "utilities_math.h"

///==================================================================================================================================================================================
///	Подключение стандартных библиотек и макросов
///==================================================================================================================================================================================

///==================================================================================================================================================================================
///	Подключение сторонних библиотек и макросов
///==================================================================================================================================================================================
#include "return.h"

///==================================================================================================================================================================================
///	Перевод целого числа в в число с плавающе запятой по стандарту IEEE-754
///==================================================================================================================================================================================

template <typename T> float HexToRealTemplate(T ieee754)
//==============================================================================================================================================
//	Функция:	HexToRealTemplate(T ieee754)
//==============================================================================================================================================
//	Шаблон функции для преобразования целого числа в число с плавающе запятой по стандарту IEEE-754
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	ieee754	-	Число
//==============================================================================================================================================
//	Возвращаемое значение функции:	Преобразованное число
//==============================================================================================================================================
//	Дата: 11.03.2021
//==============================================================================================================================================
//	Последнее обновление:	11.03.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "HEX TO REAL 32 TEMPLATE:";
	float flt;

	*((int*)&flt) = ieee754;
	return flt;
}

float HexToReal32(long ieee754) 
{ return HexToRealTemplate(ieee754); }

float HexToReal32(int32_t ieee754) 
{ return HexToRealTemplate(ieee754); }

float HexToReal32(uint32_t ieee754) 
{ return HexToRealTemplate(ieee754); }


template <typename T> double HexToRealTemplate64(T ieee754)
//==============================================================================================================================================
//	Функция:	HexToRealTemplate64(T ieee754)
//==============================================================================================================================================
//	Шаблон функции для преобразования целого числа в число с плавающе запятой по стандарту IEEE-754
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	ieee754	-	Число
//==============================================================================================================================================
//	Возвращаемое значение функции:	Преобразованное число
//==============================================================================================================================================
//	Дата: 11.03.2021
//==============================================================================================================================================
//	Последнее обновление:	11.03.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "HEX TO REAL TEMPLATE 64:";

	unsigned bits = 32;
	unsigned expbits = 8;
	double result;
	long long shift;
	unsigned bias;
	unsigned significandbits = bits - expbits - 1;
	long long One = 1;

	if (ieee754 == 0) return 0.0;

	// pull the significand
	result = (double)(ieee754  & ((One << significandbits) - 1)); // mask
	result /= (One << significandbits); // convert back to float
	result += 1.0f; // add the one back on

					// deal with the exponent
	bias = (1 << (expbits - 1)) - 1;
	shift = ((ieee754 >> significandbits) & ((One << expbits) - 1)) - bias;
	while (shift > 0) { result *= 2.0; shift--; }
	while (shift < 0) { result /= 2.0; shift++; }

	// sign it
	result *= (ieee754 >> (bits - 1)) & 1 ? -1.0 : 1.0;

	return result;
}

double HexToReal64(long ieee754) 
{ return HexToRealTemplate64(ieee754); }

double HexToReal64(int32_t ieee754) 
{ return HexToRealTemplate64(ieee754); }

double HexToReal64(uint32_t ieee754) 
{ return HexToRealTemplate64(ieee754); }

#ifdef WINDOWS_COMPILER
	double HexToReal64(int64_t ieee754) 
{ return HexToRealTemplate64(ieee754); }
#endif

double HexToReal64(uint64_t ieee754) 
{ return HexToRealTemplate64(ieee754); }


///==================================================================================================================================================================================
///	Перевод числа с плавающе запятой в целое числа по стандарту IEEE-754
///==================================================================================================================================================================================

uint32_t RealToHex32(float ieee754)
//==============================================================================================================================================
//	Функция:	RealToHex32(float ieee754)
//==============================================================================================================================================
//	Функция преобразования числа float в uint32_t по стандарту IEEE-754
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	ieee754	-	Число
//==============================================================================================================================================
//	Возвращаемое значение функции:	Преобразованное число
//==============================================================================================================================================
//	Дата: 27.06.2020
//==============================================================================================================================================
//	Последнее обновление:	27.06.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "REAL TO HEX 32:";
	union {
		int num;
		float fnum;
	} my_union;

	my_union.fnum = ieee754;
	return my_union.num;
}

uint32_t RealToHex32(double ieee754)
//==============================================================================================================================================
//	Функция:	RealToHex32(double ieee754)
//==============================================================================================================================================
//	Функция преобразования числа float в uint32_t по стандарту IEEE-754
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	ieee754	-	Число
//==============================================================================================================================================
//	Возвращаемое значение функции:	Преобразованное число
//==============================================================================================================================================
//	Дата: 27.06.2020
//==============================================================================================================================================
//	Последнее обновление:	27.06.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "REAL TO HEX 32:";
	union {
		int num;
		float fnum;
	} my_union;

	my_union.fnum = float(ieee754);
	return my_union.num;
}

uint64_t RealToHex64(float ieee754)
//==============================================================================================================================================
//	Функция:	RealToHex64(float ieee754)
//==============================================================================================================================================
//	Функция преобразования числа float в uint32_t по стандарту IEEE-754
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	ieee754	-	Число
//==============================================================================================================================================
//	Возвращаемое значение функции:	Преобразованное число
//==============================================================================================================================================
//	Дата: 27.06.2020
//==============================================================================================================================================
//	Последнее обновление:	27.06.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "REAL TO HEX 64:";

	unsigned bits = 32;
	unsigned expbits = 8;
	long double fnorm;
	int shift;
	long long sign, exp, significand, One = 1;
	unsigned significandbits = bits - expbits - 1; // -1 for sign bit


	if (ieee754 == 0.0) return 0; // get this special case out of the way

	if (ieee754 < 0) { sign = 1; fnorm = -ieee754; }
	else { sign = 0; fnorm = ieee754; }

	shift = 0;
	while (fnorm >= 2.0) { fnorm /= 2.0; shift++; }
	while (fnorm < 1.0) { fnorm *= 2.0; shift--; }
	fnorm = fnorm - 1.0;

	significand = (long long)(fnorm * ((One << significandbits) + 0.5f));
	exp = shift + ((1 << (expbits - 1)) - 1); // shift + bias

	return (sign << (bits - 1)) | (exp << (bits - expbits - 1)) | significand;
}

uint64_t RealToHex64(double ieee754)
//==============================================================================================================================================
//	Функция:	RealToHex64(double ieee754)
//==============================================================================================================================================
//	Функция преобразования числа float в uint32_t по стандарту IEEE-754
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	ieee754	-	Число
//==============================================================================================================================================
//	Возвращаемое значение функции:	Преобразованное число
//==============================================================================================================================================
//	Дата: 27.06.2020
//==============================================================================================================================================
//	Последнее обновление:	27.06.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "REAL TO HEX 64:";

	unsigned bits = 32;
	unsigned expbits = 8;
	long double fnorm;
	int shift;
	long long sign, exp, significand, One = 1;
	unsigned significandbits = bits - expbits - 1; // -1 for sign bit


	if (ieee754 == 0.0) return 0; // get this special case out of the way

	if (ieee754 < 0) { sign = 1; fnorm = -ieee754; }
	else { sign = 0; fnorm = ieee754; }

	shift = 0;
	while (fnorm >= 2.0) { fnorm /= 2.0; shift++; }
	while (fnorm < 1.0) { fnorm *= 2.0; shift--; }
	fnorm = fnorm - 1.0;

	significand = (long long)(fnorm * ((One << significandbits) + 0.5f));
	exp = shift + ((1 << (expbits - 1)) - 1); // shift + bias

	return (sign << (bits - 1)) | (exp << (bits - expbits - 1)) | significand;
}


///==================================================================================================================================================================================
///	Вычисление контрольных сумм
///==================================================================================================================================================================================

int CRCXOR(unsigned char Buffer[], int Start, int End)
//==============================================================================================================================================
//  Функция CRCXOR(unsigned char Buffer[], int Start, int End)
//==============================================================================================================================================
//  Функция возвращает значение контрольной суммы (алгоритм XOR) 
//==============================================================================================================================================
//  Переменные: 
//----------------------------------------------------------------------------------------------------------------------------------------------
//  Buffer		-	Массив данных
//  Start		-	Индекс первого элемента массива
//  End			-	Индекс последнего элемента массива
//==============================================================================================================================================
//  Возвращаемое значение функции:	Контрольная сумма;
//==============================================================================================================================================
//  Дата:	07.07.2020
//==============================================================================================================================================
//  Последнее обновление:   07.07.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CRCXOR:";

	int i = RETURN_OK;
	int CRC = RETURN_OK;


	//---------------------------------------------------------------------------------------------------------------------------------------
	//  Вычисление контрольной суммы
	//---------------------------------------------------------------------------------------------------------------------------------------
	for (i = Start; i <= End; i++) CRC ^= Buffer[i];

	//---------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//---------------------------------------------------------------------------------------------------------------------------------------
	return CRC;
}

int CRC16(unsigned char Buffer[], int Start, int End)
//==============================================================================================================================================
//  Функция CRC16(unsigned char Buffer[], int Start, int End)
//==============================================================================================================================================
//  Функция возвращает значение контрольной суммы (алгоритм CCITT) 
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//  Buffer	-	Массив данных
//  Start	-	Индекс первого элемента массива
//  End		-	Индекс последнего элемента массива
//==============================================================================================================================================
//  Возвращаемое значение функции:	Контрольная сумма;
//==============================================================================================================================================
//  Дата:	07.07.2020
//==============================================================================================================================================
//  Последнее обновление:   07.07.2020	|
//==============================================================================================================================================
{

	std::string PROGRAM_NAME = "CRC16:";
	unsigned short CRC = 0xFFFF;
	unsigned char i;
	unsigned char buf;

	//---------------------------------------------------------------------------------------------------------------------------------------
	//  Вычисление контрольной суммы
	//---------------------------------------------------------------------------------------------------------------------------------------
	for (int ii = Start; ii <= End; ii++) {
		buf = Buffer[ii];
		CRC ^= buf << 8;
		for (i = 0; i < 8; i++)			//	Цикл перебора полинома
			CRC = CRC & 0x8000 ? (CRC << 1) ^ 0x1021 : CRC << 1; }

	//---------------------------------------------------------------------------------------------------------------------------------------
	//  Выход из программы
	//---------------------------------------------------------------------------------------------------------------------------------------
	return CRC;
}

int CRC16sm(unsigned char Buffer[], int Start, int End)
//==============================================================================================================================================
//  Функция CRC16sm(unsigned char Buffer[], int Start, int End)
//==============================================================================================================================================
//  Функция рассчитывает контрольную сумму CCITT по технологии Smartmicro
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//  Buffer	-	Массив данных
//  Start	-	Индекс первого элемента массива
//  End		-	Индекс последнего элемента массива
//==============================================================================================================================================
//  Возвращаемое значение функции:	Контрольная сумма;
//==============================================================================================================================================
//  Дата:	07.07.2020
//==============================================================================================================================================
//  Последнее обновление:   07.07.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CRC16 SM:";

	unsigned short CRC = 0xFFFF;
	unsigned char i;
	int Lenght;
	int Flag = 0;
	unsigned char buf;


	//---------------------------------------------------------------------------------------------------------------------------------------
	//  Вычислление длины байтового пакета и проверка его на четность
	//---------------------------------------------------------------------------------------------------------------------------------------
	Lenght = (End - Start) + 1;
	if (Lenght % 2 != 0) Flag = 1;
	if (Flag == 1) End++;

	for (int ii = Start; ii <= End; ii++) {
		buf = Buffer[ii];
		if (Flag == 1 && ii == End) buf = 0x00;
		CRC ^= buf++ << 8;
		for (i = 0; i < 8; i++) CRC = CRC & 0x8000 ? (CRC << 1) ^ 0x1021 : CRC << 1; }

	//---------------------------------------------------------------------------------------------------------------------------------------
	//  Выход из программы
	//---------------------------------------------------------------------------------------------------------------------------------------
	return CRC;
}


///==================================================================================================================================================================================
///	Конец файла
///==================================================================================================================================================================================
