#include "utilities_bit.h"

///==================================================================================================================================================================================
///	Подключение стандартных библиотек и макросов
///==================================================================================================================================================================================
#include <string>

///==================================================================================================================================================================================
///	Подключение сторонних библиотек и макросов
///==================================================================================================================================================================================
#include "return.h"


///==================================================================================================================================================================================
///	Получение бита
///==================================================================================================================================================================================

template <typename T> int GetBitTemplate(T Number, int Position)
//==============================================================================================================================================
//	Функция:	GetBitTemplate(T Number, int Position)
//==============================================================================================================================================
//	Шаблон функции для возврата значения заданного бита числа
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number		-	Число
//	Position	-	Номер бита
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка данных; 0 или 1 - Значение бита
//==============================================================================================================================================
//	Дата: 24.10.2020
//==============================================================================================================================================
//	Последнее обновление:	24.10.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "GET BIT TEMPLATE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (Number < RETURN_OK || Position < RETURN_OK) return RETURN_ERROR;
	if (Position > sizeof(Number) * 8) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return ((Number & (uint64_t(1) << Position)) != 0);
}

int GetBit(long Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int GetBit(int8_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int GetBit(int16_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int GetBit(int32_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

#ifdef WINDOWS_COMPILER
	int GetBit(int64_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }
#endif

int GetBit(uint8_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int GetBit(uint16_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int GetBit(uint32_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int GetBit(uint64_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int CheckBit(long Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int CheckBit(int8_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int CheckBit(int16_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int CheckBit(int32_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

#ifdef WINDOWS_COMPILER
	int CheckBit(int64_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }
#endif

int CheckBit(uint8_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int CheckBit(uint16_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int CheckBit(uint32_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

int CheckBit(uint64_t Number, int Position) 
{ return GetBitTemplate(Number, Position); }

///==================================================================================================================================================================================
///	Установка бита
///==================================================================================================================================================================================

template <typename T> int SetBitTemplate(T &Number, int Position)
//==============================================================================================================================================
//	Функция:	SetBitTemplate(T &Number, int Position)
//==============================================================================================================================================
//	Шаблон функции для установки значения заданного бита в единицу
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number		-	Число
//	Position	-	Номер бита
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка данных; 1: Успешно
//==============================================================================================================================================
//	Дата: 24.10.2020
//==============================================================================================================================================
//	Последнее обновление:	24.10.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "SET BIT TEMPLATE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (Number < RETURN_OK || Position < RETURN_OK) return RETURN_ERROR;
	if (Position > sizeof(Number) * 8) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Установка бита в единицу
	//------------------------------------------------------------------------------------------------------------------------------------------
	Number = Number | (uint64_t(1) << Position);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int SetBit(long &Number, int Position) 
{ return SetBitTemplate(Number, Position); }

int SetBit(int8_t &Number, int Position) 
{ return SetBitTemplate(Number, Position); }

int SetBit(int16_t &Number, int Position) 
{ return SetBitTemplate(Number, Position); }

int SetBit(int32_t &Number, int Position) 
{ return SetBitTemplate(Number, Position); }

#ifdef WINDOWS_COMPILER
	int SetBit(int64_t &Number, int Position)
{ return SetBitTemplate(Number, Position); }
#endif

int SetBit(uint8_t &Number, int Position) 
{ return SetBitTemplate(Number, Position); }

int SetBit(uint16_t &Number, int Position) 
{ return SetBitTemplate(Number, Position); }

int SetBit(uint32_t &Number, int Position) 
{ return SetBitTemplate(Number, Position); }

int SetBit(uint64_t &Number, int Position) 
{ return SetBitTemplate(Number, Position); }


///==================================================================================================================================================================================
///	Очистка бита
///==================================================================================================================================================================================

template <typename T> int CleanBitTemplate(T &Number, int Position)
//==============================================================================================================================================
//	Функция:	CleanBitTemplate(T &Number, int Position)
//==============================================================================================================================================
//	Шаблон функции для установки значения заданного бита в ноль
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number		-	Число
//	Position	-	Номер бита
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка данных; 1: Успешно
//==============================================================================================================================================
//	Дата: 24.10.2020
//==============================================================================================================================================
//	Последнее обновление:	24.10.2020	|
//==============================================================================================================================================
{
	std::string  PROGRAM_NAME = "CLEAN BIT TEMPLATE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (Number < RETURN_OK || Position < RETURN_OK) return RETURN_ERROR;
	if (Position > sizeof(Number) * 8) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Установка бита в 0
	//------------------------------------------------------------------------------------------------------------------------------------------
	Number = Number & ~(1 << Position);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int CleanBit(long &Number, int Position) 
{ return CleanBitTemplate(Number, Position); }

int CleanBit(int8_t &Number, int Position) 
{ return CleanBitTemplate(Number, Position); }

int CleanBit(int16_t &Number, int Position) 
{ return CleanBitTemplate(Number, Position); }

int CleanBit(int32_t &Number, int Position) 
{ return CleanBitTemplate(Number, Position); }

#ifdef WINDOWS_COMPILER
	int CleanBit(int64_t &Number, int Position)
{ return CleanBitTemplate(Number, Position); }
#endif

int CleanBit(uint8_t &Number, int Position) 
{ return CleanBitTemplate(Number, Position); }

int CleanBit(uint16_t &Number, int Position) 
{ return CleanBitTemplate(Number, Position); }

int CleanBit(uint32_t &Number, int Position) 
{ return CleanBitTemplate(Number, Position); }

int CleanBit(uint64_t &Number, int Position) 
{ return CleanBitTemplate(Number, Position); }


///==================================================================================================================================================================================
///	Установка бита в заданное значение
///==================================================================================================================================================================================

template <typename T> int PutBitTemplate(T &Number, int Position, bool Bit)
//==============================================================================================================================================
//	Функция:	int PutBitTemplate(T &Number, int Position, bool Bit)
//==============================================================================================================================================
//	Шаблон функции для установки значения заданного бита в заданное значение
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number		-	Число
//	Position	-	Номер бита
//	Bit			-	Значение бита
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка данных; 1: Успешно
//==============================================================================================================================================
//	Дата: 25.10.2020
//==============================================================================================================================================
//	Последнее обновление:	25.10.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "PUT BIT TEMPLATE:";
	int RETURN = RETURN_ERROR;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Установка бита
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (Bit == RETURN_TRUE)  RETURN = SetBit(Number, Position);
	if (Bit == RETURN_FALSE) RETURN = CleanBit(Number, Position);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN;
}

int PutBit(long &Number, int Position, bool Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(int8_t &Number, int Position, bool Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(int16_t &Number, int Position, bool Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(int32_t &Number, int Position, bool Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

#ifdef WINDOWS_COMPILER
	int PutBit(int64_t &Number, int Position, bool Bit)
{ return PutBitTemplate(Number, Position, Bit); }
#endif

int PutBit(uint8_t &Number, int Position, bool Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(uint16_t &Number, int Position, bool Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(uint32_t &Number, int Position, bool Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(uint64_t &Number, int Position, bool Bit) 
{ return PutBitTemplate(Number, Position, Bit); }


template <typename T> int PutBitTemplate(T &Number, int Position, int Bit)
//==============================================================================================================================================
//	Функция:	int PutBitTemplate(T &Number, int Position, int Bit)
//==============================================================================================================================================
//	Шаблон функции для установки значения заданного бита в заданное значение
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number		-	Число
//	Position	-	Номер бита
//	Bit			-	Значение бита
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка данных; 1: Успешно
//==============================================================================================================================================
//	Дата: 25.10.2020
//==============================================================================================================================================
//	Последнее обновление:	25.10.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "PUT BIT TEMPLATE:";
	int RETURN = RETURN_ERROR;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Установка бита
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (Bit == RETURN_DATA)  RETURN = SetBit(Number, Position);
	if (Bit == RETURN_OK) RETURN = CleanBit(Number, Position);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN;
}

int PutBit(long &Number, int Position, int Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(int8_t &Number, int Position, int Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(int16_t &Number, int Position, int Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(int32_t &Number, int Position, int Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

#ifdef WINDOWS_COMPILER
	int PutBit(int64_t &Number, int Position, int Bit)
{ return PutBitTemplate(Number, Position, Bit); }
#endif

int PutBit(uint8_t &Number, int Position, int Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(uint16_t &Number, int Position, int Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(uint32_t &Number, int Position, int Bit) 
{ return PutBitTemplate(Number, Position, Bit); }

int PutBit(uint64_t &Number, int Position, int Bit) 
{ return PutBitTemplate(Number, Position, Bit); }


///==================================================================================================================================================================================
///	Изменение значения бита на противоположное
///==================================================================================================================================================================================

template <typename T> int ChangeBitTemplate(T &Number, int Position)
//==============================================================================================================================================
//	Функция:	int ChangeBitTemplate(T &Number, int Position)
//==============================================================================================================================================
//	Шаблон функции для изменения значения заданного бита на противоположное
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number		-	Число
//	Position	-	Номер бита
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка данных; 1: Успешно
//==============================================================================================================================================
//	Дата: 25.10.2020
//==============================================================================================================================================
//	Последнее обновление:	25.10.2020	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CHANGE BIT TEMPLATE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (Number < RETURN_OK || Position < RETURN_OK) return RETURN_ERROR;
	if (Position > sizeof(Number) * 8) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Инвертирование бита
	//------------------------------------------------------------------------------------------------------------------------------------------
	Number = Number ^ (uint64_t(1) << Position);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int ChangeBit(long &Number, int Position) 
{ return ChangeBitTemplate(Number, Position); }

int ChangeBit(int8_t &Number, int Position) 
{ return ChangeBitTemplate(Number, Position); }

int ChangeBit(int16_t &Number, int Position) 
{ return ChangeBitTemplate(Number, Position); }

int ChangeBit(int32_t &Number, int Position) 
{ return ChangeBitTemplate(Number, Position); }

#ifdef WINDOWS_COMPILER
	int ChangeBit(int64_t &Number, int Position)
{ return ChangeBitTemplate(Number, Position); }
#endif

int ChangeBit(uint8_t &Number, int Position) 
{ return ChangeBitTemplate(Number, Position); }

int ChangeBit(uint16_t &Number, int Position) 
{ return ChangeBitTemplate(Number, Position); }

int ChangeBit(uint32_t &Number, int Position) 
{ return ChangeBitTemplate(Number, Position); }

int ChangeBit(uint64_t &Number, int Position) 
{ return ChangeBitTemplate(Number, Position); }


///==================================================================================================================================================================================
///	Конец файла
///==================================================================================================================================================================================
