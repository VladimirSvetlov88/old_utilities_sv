#include "utilities_log.h"

///==================================================================================================================================================================================
///	Подключение стандартных библиотек и макросов
///==================================================================================================================================================================================
#include <chrono>
#include <thread>
#include <stdarg.h>
#include <time.h>

///==================================================================================================================================================================================
///	Подключение сторонних библиотек и макросов
///==================================================================================================================================================================================
#ifndef WINDOWS_COMPILER
	#define fopen_s(pFile,filename,mode) ((*(pFile))=fopen((filename),  (mode)))==NULL
#endif

#include "return.h"
#include "utilities_namespace.h"


///==================================================================================================================================================================================
///	Настройка параметров вывода
///==================================================================================================================================================================================

void InitLogSettings()
//==============================================================================================================================================
//	Программа:	InitLogSettings()
//==============================================================================================================================================
//	Программа первоначальной настройки параметров вывода информации
//==============================================================================================================================================
//  Переменные:
//==============================================================================================================================================
//	Возвращаемое значение функции:
//==============================================================================================================================================
//	Дата: 12.06.2021
//==============================================================================================================================================
//	Последнее обновление:	12.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "INIT LOG SETTINGS:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Настройка параметров вывода на экран (разблокировано)
	//------------------------------------------------------------------------------------------------------------------------------------------
	utilities_log_namespace::type_enable = RETURN_TRUE;
	utilities_log_namespace::type_lock = RETURN_FALSE;
	utilities_log_namespace::type_timer = LOG_OUTPUT_NONE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Настройка параметров вывода в log файл (заблокировано)
	//------------------------------------------------------------------------------------------------------------------------------------------
	utilities_log_namespace::print_enable = RETURN_FALSE;
	utilities_log_namespace::print_lock = RETURN_FALSE;
	utilities_log_namespace::print_timer = LOG_OUTPUT_NONE;
	utilities_log_namespace::logFile.clear();
	utilities_log_namespace::logStream = NULL;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

template <typename T> int SetLogOutputTemplate(T log_output)
//==============================================================================================================================================
//	Функция:	SetLogOutputTemplate(T log_output)
//==============================================================================================================================================
//	Шаблон функции определения параметров вывода информации на экран и в log файл
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	log_output	-	Параметры вывода
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибочный параметр; 0: Параметры не заданы; 1: Параметры заданы;
//==============================================================================================================================================
//	Дата: 12.06.2021
//==============================================================================================================================================
//	Последнее обновление:	12.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "SET LOG OUTPUT TEMPLATE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (log_output < LOG_OUTPUT_NONE || log_output> LOG_OUTPUT_BOTH) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Определение параметров вывода
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (log_output == LOG_OUTPUT_NONE) {
		utilities_log_namespace::type_enable = RETURN_FALSE;
		utilities_log_namespace::type_timer = LOG_OUTPUT_NONE;

		utilities_log_namespace::print_enable = RETURN_FALSE;
		utilities_log_namespace::print_timer = LOG_OUTPUT_NONE;
		utilities_log_namespace::logFile.clear();
		utilities_log_namespace::logStream = NULL;
		return RETURN_DATA; }

	if (log_output == LOG_OUTPUT_TYPE || log_output == LOG_OUTPUT_BOTH) utilities_log_namespace::type_enable = RETURN_FALSE;
	if (log_output == LOG_OUTPUT_PRINT || log_output == LOG_OUTPUT_BOTH) utilities_log_namespace::print_enable = RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int SetLogOutput(long log_output)
{ return SetLogOutputTemplate(log_output); }

int SetLogOutput(int8_t log_output)
{ return SetLogOutputTemplate(log_output); }

int SetLogOutput(int16_t log_output)
{ return SetLogOutputTemplate(log_output); }

int SetLogOutput(int32_t log_output)
{ return SetLogOutputTemplate(log_output); }

#ifdef WINDOWS_COMPILER
	int SetLogOutput(int64_t log_output)
{ return SetLogOutputTemplate(log_output); }
#endif

int SetLogOutput(uint8_t log_output)
{ return SetLogOutputTemplate(log_output); }

int SetLogOutput(uint16_t log_output)
{ return SetLogOutputTemplate(log_output); }

int SetLogOutput(uint32_t log_output)
{ return SetLogOutputTemplate(log_output); }

int SetLogOutput(uint64_t log_output)
{ return SetLogOutputTemplate(log_output); }


///==================================================================================================================================================================================
///	Настройка параметров вывода на экран
///==================================================================================================================================================================================

void EnableLogType()
{ utilities_log_namespace::type_enable = RETURN_TRUE; }

void DisableLogType()
{ utilities_log_namespace::type_enable = RETURN_FALSE; }

template <typename T> int SetTypeTimerTemplate(T type_timer)
//==============================================================================================================================================
//	Функция:	SetTypeTimerTemplate(T type_timer)
//==============================================================================================================================================
//	Шаблон функции для установки формата времени при выводе на экран
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	type_timer	-	Формат вывода времени
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка параметра; 0: Формат не задан; 1: Формат задан;
//==============================================================================================================================================
//	Дата: 12.06.2021
//==============================================================================================================================================
//	Последнее обновление:	12.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "SET TYPE TIMER TEMPLATE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (type_timer < TIME_ZONE_NONE || type_timer > TIME_ZONE_GMT) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Установка параметра
	//------------------------------------------------------------------------------------------------------------------------------------------
	utilities_log_namespace::type_timer = (uint8_t) type_timer;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int SetTypeTimer(long type_timer)
{ return SetTypeTimerTemplate(type_timer); }

int SetTypeTimer(int8_t type_timer)
{ return SetTypeTimerTemplate(type_timer); }

int SetTypeTimer(int16_t type_timer)
{ return SetTypeTimerTemplate(type_timer); }

int SetTypeTimer(int32_t type_timer)
{ return SetTypeTimerTemplate(type_timer); }

#ifdef WINDOWS_COMPILER
	int SetTypeTimer(int64_t type_timer)
{ return SetTypeTimerTemplate(type_timer); }
#endif

int SetTypeTimer(uint8_t type_timer)
{ return SetTypeTimerTemplate(type_timer); }

int SetTypeTimer(uint16_t type_timer)
{ return SetTypeTimerTemplate(type_timer); }

int SetTypeTimer(uint32_t type_timer)
{ return SetTypeTimerTemplate(type_timer); }

int SetTypeTimer(uint64_t type_timer)
{ return SetTypeTimerTemplate(type_timer); }


///==================================================================================================================================================================================
///	Настройка параметров вывода в log файл
///==================================================================================================================================================================================

void EnableLogPrint()
{ utilities_log_namespace::print_enable = RETURN_TRUE; }

void DisableLogPrint()
{ utilities_log_namespace::print_enable = RETURN_FALSE; }

template <typename T> int SetPrintTimerTemplate(T print_timer)
//==============================================================================================================================================
//	Функция:	SetPrintTimerTemplate(T print_timer)
//==============================================================================================================================================
//	Шаблон функции для установки формата времени при выводе в log файл
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	print_timer	-	Формат вывода времени
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка параметра; 0: Формат не задан; 1: Формат задан;
//==============================================================================================================================================
//	Дата: 12.06.2021
//==============================================================================================================================================
//	Последнее обновление:	12.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "SET PRINT TIMER TEMPLATE:";

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (print_timer < TIME_ZONE_NONE || print_timer > TIME_ZONE_GMT) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Установка параметра
	//------------------------------------------------------------------------------------------------------------------------------------------
	utilities_log_namespace::print_timer = (uint8_t)print_timer;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int SetPrintTimer(long print_timer)
{ return SetPrintTimerTemplate(print_timer); }

int SetPrintTimer(int8_t print_timer)
{ return SetPrintTimerTemplate(print_timer); }

int SetPrintTimer(int16_t print_timer)
{ return SetPrintTimerTemplate(print_timer); }

int SetPrintTimer(int32_t print_timer)
{ return SetPrintTimerTemplate(print_timer); }

#ifdef WINDOWS_COMPILER
	int SetPrintTimer(int64_t print_timer)
{ return SetPrintTimerTemplate(print_timer); }
#endif

int SetPrintTimer(uint8_t print_timer)
{ return SetPrintTimerTemplate(print_timer); }

int SetPrintTimer(uint16_t print_timer)
{ return SetPrintTimerTemplate(print_timer); }

int SetPrintTimer(uint32_t print_timer)
{ return SetPrintTimerTemplate(print_timer); }

int SetPrintTimer(uint64_t print_timer)
{ return SetPrintTimerTemplate(print_timer); }

void SetLogFile(std::string FileName)
{ utilities_log_namespace::logFile = FileName; }

void SetLogFile(const char * FileName)
{ utilities_log_namespace::logFile = std::string(FileName); }

int CreateLogFile()
//==============================================================================================================================================
//	Функция:	CreateLogFile()
//==============================================================================================================================================
//	Функция открытия файла для вывода log сообщений
//==============================================================================================================================================
//  Переменные:
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка открытия файла; 0: Файл не открыт; 1: Файл открыт;
//==============================================================================================================================================
//	Дата: 14.06.2021
//==============================================================================================================================================
//	Последнее обновление:	14.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CREATE LOG FILE:";
	int Error = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Открытие log файла
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::print_enable == RETURN_FALSE) return RETURN_OK;
	if (utilities_log_namespace::print_lock == RETURN_TRUE) return RETURN_ERROR;
	Error = fopen_s(&utilities_log_namespace::logStream, utilities_log_namespace::logFile.c_str(), "w");
	if (Error == RETURN_OK) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}


///==================================================================================================================================================================================
///	Вывод информации на экран и в log файл
///==================================================================================================================================================================================

void Type(const char *format, ...)
//==============================================================================================================================================
//	Программа:	Type(const char *format, ...)
//==============================================================================================================================================
//	Программа вывода на экран заданной строки
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	format	-	Формат строки
//==============================================================================================================================================
//	Возвращаемое значение функции:
//==============================================================================================================================================
//	Дата: 30.05.2020
//==============================================================================================================================================
//	Последнее обновление:	30.05.2020	|
//	Последнее обновление:	27.03.2021	|	Добавлена блокировка вывода на экран
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "TYPE:";
	va_list args;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Блокировка вывода на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	while (utilities_log_namespace::type_lock == RETURN_TRUE) { std::this_thread::sleep_for(std::chrono::microseconds(5)); }
	utilities_log_namespace::type_lock = RETURN_TRUE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Вывод сообщения на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	va_start(args, format);
	vprintf(format, args);
	va_end(args);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Разблокирование вывода на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	utilities_log_namespace::type_lock = RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void Print(const char *format, ...)
//==============================================================================================================================================
//	Программа:	Print(const char *format, ...)
//==============================================================================================================================================
//	Программа вывода заданной строки в файл
//==============================================================================================================================================
//	Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	format	-	Формат строки
//==============================================================================================================================================
//	Возвращаемое значение функции:
//==============================================================================================================================================
//	Дата: 30.05.2020
//==============================================================================================================================================
//	Последнее обновление:	30.05.2020	|
//	Последнее обновление:	27.03.2021	|	Добавлена блокировка вывода
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "PRINT:";
	va_list args;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка потока вывода
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::logStream == NULL || utilities_log_namespace::logFile.empty()) return;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Блокировка вывода в log файл
	//------------------------------------------------------------------------------------------------------------------------------------------
	while (utilities_log_namespace::print_lock == RETURN_TRUE) { std::this_thread::sleep_for(std::chrono::microseconds(5)); }
	utilities_log_namespace::print_lock = RETURN_TRUE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Вывод сообщения в log файл
	//------------------------------------------------------------------------------------------------------------------------------------------
	va_start(args, format);
	vfprintf(utilities_log_namespace::logStream, format, args);
	va_end(args);
	fflush(utilities_log_namespace::logStream);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Разблокирование вывода в log файл
	//------------------------------------------------------------------------------------------------------------------------------------------
	utilities_log_namespace::print_lock = RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}


///==================================================================================================================================================================================
///	Вывод сообщения на экран
///==================================================================================================================================================================================

template <typename T> std::string logStampTemplate(T time_zone)
//==============================================================================================================================================
//	Функция:	logStampTemplate(T time_zone)
//==============================================================================================================================================
//	Шаблон функции формирования отметки Дата/Время для вывода log сообщений
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	time_zone	-	Часовой пояс
//==============================================================================================================================================
//	Возвращаемое значение функции:	Строка Дата/время
//==============================================================================================================================================
//	Дата: 15.06.2021
//==============================================================================================================================================
//	Последнее обновление:	15.06.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "LOG STAMP TEMPLATE:";

	std::string Result;
	time_t CurrentTime = RETURN_OK;
	struct tm Time = { 0 };


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	Result.clear();
	if (time_zone == TIME_ZONE_NONE) return Result;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Получение текущего времени
	//------------------------------------------------------------------------------------------------------------------------------------------
	CurrentTime = time(NULL);
#ifdef WINDOWS_COMPILER
	if (time_zone == TIME_ZONE_LOCAL) localtime_s(&Time, &CurrentTime);
	if (time_zone == TIME_ZONE_GMT) gmtime_s(&Time, &CurrentTime);
#else
	if (time_zone == TIME_ZONE_LOCAL) localtime_r(&CurrentTime, &Time);
	if (time_zone == TIME_ZONE_GMT) gmtime_r(&CurrentTime, &Time);
#endif

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Формирование строки Дата/Время
	//------------------------------------------------------------------------------------------------------------------------------------------
	Result = '|';
	if (Time.tm_mday < 10) {
		Result = Result + '0' + std::to_string(Time.tm_mday) + '.';
	} else {
		Result = Result + std::to_string(Time.tm_mday) + '.'; }
	if (Time.tm_mon < 9) {
		Result = Result + '0' + std::to_string(1 + Time.tm_mon) + '.';
	} else {
		Result = Result + std::to_string(1 + Time.tm_mon) + '.'; }
	Result = Result + std::to_string(1900 + Time.tm_year) + '|';

	if (Time.tm_hour < 10) {
		Result = Result + '0' + std::to_string(Time.tm_hour) + ':';
	} else {
		Result = Result + std::to_string(Time.tm_hour) + ':'; }
	if (Time.tm_min < 10) {
		Result = Result + '0' + std::to_string(Time.tm_min) + ':';
	} else {
		Result = Result + std::to_string(Time.tm_min) + ':'; }
	if (Time.tm_sec < 10) {
		Result = Result + '0' + std::to_string(Time.tm_sec);
	} else {
		Result = Result + std::to_string(Time.tm_sec); }
	Result = Result + "| ";

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return Result;
}

std::string logStamp(long time_zone)
{ return logStampTemplate(time_zone); }

std::string logStamp(int8_t time_zone)
{ return logStampTemplate(time_zone); }

std::string logStamp(int16_t time_zone)
{ return logStampTemplate(time_zone); }

std::string logStamp(int32_t time_zone)
{ return logStampTemplate(time_zone); }

#ifdef WINDOWS_COMPILER
	std::string logStamp(int64_t time_zone)
{ return logStampTemplate(time_zone); }
#endif

std::string logStamp(uint8_t time_zone)
{ return logStampTemplate(time_zone); }

std::string logStamp(uint16_t time_zone)
{ return logStampTemplate(time_zone); }

std::string logStamp(uint32_t time_zone)
{ return logStampTemplate(time_zone); }

std::string logStamp(uint64_t time_zone)
{ return logStampTemplate(time_zone); }


int TypeMessage(const char *format, ...)
//==============================================================================================================================================
//	Функция:	TypeMessage(const char *format, ...)
//==============================================================================================================================================
//	Функция вывода на экран заданной строки с учетом настроек логирования
//==============================================================================================================================================
//	Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	format	-	Формат строки
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка вывода; 0: Строка не выведена; 1: Строка выведена;
//==============================================================================================================================================
//	Дата: 27.03.2021
//==============================================================================================================================================
//	Последнее обновление:	27.03.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "TYPE MESSAGE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка разрешения на вывод
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::type_enable == RETURN_FALSE) return RETURN_OK;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Блокировка вывода на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	while (utilities_log_namespace::type_lock == RETURN_TRUE) { std::this_thread::sleep_for(std::chrono::microseconds(5)); }
	utilities_log_namespace::type_lock = RETURN_TRUE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Вывод на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::type_timer != TIME_ZONE_NONE) Type("%s", logStamp(utilities_log_namespace::type_timer).c_str());
	Type(format);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Разблокирование вывода на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	utilities_log_namespace::type_lock = RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}


template <typename T> int TypeLineTemplate(T Number)
//==============================================================================================================================================
//	Функция:	TypeLineTemplate(T Number) 
//==============================================================================================================================================
//	Шаблон функции вывода линии на экран
//==============================================================================================================================================
//	Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	длина линии
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка вывода; 0: Линия не выведена; 1: Линия выведена;
//==============================================================================================================================================
//	Дата:	27.03.2021
//==============================================================================================================================================
//	Последнее обновление:	27.03.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "TYPE LINE TEMPLATE:";

	T i = RETURN_OK;
	std::string Line;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка разрешения на вывод
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::type_enable == RETURN_FALSE) return RETURN_OK;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Формирование линии
	//------------------------------------------------------------------------------------------------------------------------------------------
	Line.clear();
	for (i = RETURN_OK; i < Number; i++) Line = Line + "-";

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Вывод линии
	//------------------------------------------------------------------------------------------------------------------------------------------
	TypeMessage("%s\n", Line.c_str());
	Line.clear();

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int TypeLine(long Number) 
{ return TypeLineTemplate(Number); }

int TypeLine(int8_t Number) 
{ return TypeLineTemplate(Number); }

int TypeLine(int16_t Number) 
{ return TypeLineTemplate(Number); }

int TypeLine(int32_t Number) 
{ return TypeLineTemplate(Number); }

#ifdef WINDOWS_COMPILER
	int TypeLine(int64_t Number)
{ return TypeLineTemplate(Number); }
#endif

int TypeLine(uint8_t Number) 
{ return TypeLineTemplate(Number); }

int TypeLine(uint16_t Number) 
{ return TypeLineTemplate(Number); }

int TypeLine(uint32_t Number)
{ return TypeLineTemplate(Number); }

int TypeLine(uint64_t Number)
{ return TypeLineTemplate(Number); }


template <typename T> int TypeDoublLineTemplate(T Number)
//==============================================================================================================================================
//	Функция:	TypeDoublLineTemplate(T Number) 
//==============================================================================================================================================
//	Шаблон функции вывода двойной линии на экран
//==============================================================================================================================================
//	Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	длина линии
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка вывода; 0: Линия не выведена; 1: Линия выведена;
//==============================================================================================================================================
//	Дата:	27.03.2021
//==============================================================================================================================================
//	Последнее обновление:	27.03.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "TYPE DOUBLE LINE TEMPLATE:";

	T i = RETURN_OK;
	std::string Line;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка разрешения на вывод
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::type_enable == RETURN_FALSE) return RETURN_OK;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Формирование линии
	//------------------------------------------------------------------------------------------------------------------------------------------
	Line.clear();
	for (i = RETURN_OK; i < Number; i++) Line = Line + "=";

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Вывод линии
	//------------------------------------------------------------------------------------------------------------------------------------------
	TypeMessage("%s\n", Line.c_str());
	Line.clear();

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int TypeDoubleLine(long Number)
{ return TypeDoublLineTemplate(Number); }

int TypeDoubleLine(int8_t Number)
{ return TypeDoublLineTemplate(Number); }

int TypeDoubleLine(int16_t Number)
{ return TypeDoublLineTemplate(Number); }

int TypeDoubleLine(int32_t Number)
{ return TypeDoublLineTemplate(Number); }

#ifdef WINDOWS_COMPILER
	int TypeDoubleLine(int64_t Number)
{ return TypeDoublLineTemplate(Number); }
#endif

int TypeDoubleLine(uint8_t Number)
{ return TypeDoublLineTemplate(Number); }

int TypeDoubleLine(uint16_t Number)
{ return TypeDoublLineTemplate(Number); }

int TypeDoubleLine(uint32_t Number)
{ return TypeDoublLineTemplate(Number);}

int TypeDoubleLine(uint64_t Number)
{ return TypeDoublLineTemplate(Number); }


///==================================================================================================================================================================================
///	Вывод сообщения в log файл
///==================================================================================================================================================================================

int PrintMessage(const char *format, ...)
//==============================================================================================================================================
//	Функция:	PrintMessage(const char *format, ...)
//==============================================================================================================================================
//	Функция вывода в log файл заданной строки с учетом настроек логирования
//==============================================================================================================================================
//	Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	format	-	Формат строки
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка вывода; 0: Строка не выведена; 1: Строка выведена;
//==============================================================================================================================================
//	Дата: 27.03.2021
//==============================================================================================================================================
//	Последнее обновление:	27.03.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "PRINT MESSAGE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка разрешения на вывод
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::print_enable == RETURN_FALSE) return RETURN_OK;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Блокировка вывода на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	while (utilities_log_namespace::print_lock == RETURN_TRUE) { std::this_thread::sleep_for(std::chrono::microseconds(5)); }
	utilities_log_namespace::print_lock = RETURN_TRUE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Вывод на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::print_timer != TIME_ZONE_NONE) Print("%s", logStamp(utilities_log_namespace::print_timer).c_str());
	Print(format);

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Разблокирование вывода на экран
	//------------------------------------------------------------------------------------------------------------------------------------------
	utilities_log_namespace::print_lock = RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}


template <typename T> int PrintLineTemplate(T Number)
//==============================================================================================================================================
//	Функция:	PrintLineTemplate(T Number) 
//==============================================================================================================================================
//	Шаблон функции вывода линии в log файл
//==============================================================================================================================================
//	Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	длина линии
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка вывода; 0: Линия не выведена; 1: Линия выведена;
//==============================================================================================================================================
//	Дата:	27.03.2021
//==============================================================================================================================================
//	Последнее обновление:	27.03.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "PRINT LINE TEMPLATE:";

	T i = RETURN_OK;
	std::string Line;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка разрешения на вывод
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::type_enable == RETURN_FALSE) return RETURN_OK;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Формирование линии
	//------------------------------------------------------------------------------------------------------------------------------------------
	Line.clear();
	for (i = RETURN_OK; i < Number; i++) Line = Line + "-";

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Вывод линии
	//------------------------------------------------------------------------------------------------------------------------------------------
	PrintMessage("%s\n", Line.c_str());
	Line.clear();

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int PrintLine(long Number)
{ return PrintLineTemplate(Number); }

int PrintLine(int8_t Number)
{ return PrintLineTemplate(Number); }

int PrintLine(int16_t Number)
{ return PrintLineTemplate(Number); }

int PrintLine(int32_t Number)
{ return PrintLineTemplate(Number); }

#ifdef WINDOWS_COMPILER
	int PrintLine(int64_t Number)
{ return PrintLineTemplate(Number); }
#endif

int PrintLine(uint8_t Number)
{ return PrintLineTemplate(Number); }

int PrintLine(uint16_t Number)
{ return PrintLineTemplate(Number); }

int PrintLine(uint32_t Number)
{ return PrintLineTemplate(Number); }

int PrintLine(uint64_t Number)
{ return PrintLineTemplate(Number); }


template <typename T> int PrintDoubleLineTemplate(T Number)
//==============================================================================================================================================
//	Функция:	PrintDoubleLineTemplate(T Number) 
//==============================================================================================================================================
//	Шаблон функции вывода двойной линии в log файл
//==============================================================================================================================================
//	Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	длина линии
//==============================================================================================================================================
//	Возвращаемое значение функции:	-1: Ошибка вывода; 0: Линия не выведена; 1: Линия выведена;
//==============================================================================================================================================
//	Дата:	27.03.2021
//==============================================================================================================================================
//	Последнее обновление:	27.03.2021	|
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "PRINT DOUBLE LINE TEMPLATE:";

	T i = RETURN_OK;
	std::string Line;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка разрешения на вывод
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (utilities_log_namespace::type_enable == RETURN_FALSE) return RETURN_OK;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Формирование линии
	//------------------------------------------------------------------------------------------------------------------------------------------
	Line.clear();
	for (i = RETURN_OK; i < Number; i++) Line = Line + "=";

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Вывод линии
	//------------------------------------------------------------------------------------------------------------------------------------------
	PrintMessage("%s\n", Line.c_str());
	Line.clear();

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int PrintDoubleLine(long Number)
{ return PrintDoubleLineTemplate(Number); }

int PrintDoubleLine(int8_t Number)
{ return PrintDoubleLineTemplate(Number); }

int PrintDoubleLine(int16_t Number)
{ return PrintDoubleLineTemplate(Number); }

int PrintDoubleLine(int32_t Number)
{ return PrintDoubleLineTemplate(Number); }

#ifdef WINDOWS_COMPILER
	int PrintDoubleLine(int64_t Number)
{ return PrintDoubleLineTemplate(Number); }
#endif

int PrintDoubleLine(uint8_t Number)
{ return PrintDoubleLineTemplate(Number); }

int PrintDoubleLine(uint16_t Number)
{ return PrintDoubleLineTemplate(Number); }

int PrintDoubleLine(uint32_t Number)
{ return PrintDoubleLineTemplate(Number); }

int PrintDoubleLine(uint64_t Number)
{ return PrintDoubleLineTemplate(Number); }


///==================================================================================================================================================================================
///	Конец файла
///==================================================================================================================================================================================

