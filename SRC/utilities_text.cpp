#include "utilities_text.h"

///==================================================================================================================================================================================
///	Подключение стандартных библиотек и макросов
///==================================================================================================================================================================================


///==================================================================================================================================================================================
///	Подключение сторонних библиотек и макросов
///==================================================================================================================================================================================
#include "return.h"


///==================================================================================================================================================================================
///	Сравнение текстов
///==================================================================================================================================================================================

bool CompareText(std::string A, std::string B)
//==============================================================================================================================================
//  Функция	CompareText(std::string A, std::string B)
//==============================================================================================================================================
//  Функция сравнения текстов в двух переменных
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Первый сравниваемый текст
//	B	-	Второй сравниваемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: TRUE: Тексты идентичны; FALSE: Тексты не идентичны;
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "COMPARE TEXT:";
	size_t size = RETURN_OK, i = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка исходных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (A == B) return RETURN_TRUE;
	if (A.size() != B.size()) return RETURN_TRUE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Посимвольная проверка
	//------------------------------------------------------------------------------------------------------------------------------------------
	size = A.size();
	for (i = RETURN_OK; i < size; i++) if (toupper(A[i]) != toupper(B[i])) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_TRUE;
}

bool CompareText(std::string A, const char* B)
//==============================================================================================================================================
//  Функция	CompareText(std::string A, std::string B)
//==============================================================================================================================================
//  Функция сравнения текстов в двух переменных
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Первый сравниваемый текст
//	B	-	Второй сравниваемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: TRUE: Тексты идентичны; FALSE: Тексты не идентичны;
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "COMPARE TEXT:";
	size_t size_a = RETURN_OK, size_b = RETURN_OK, i = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка исходных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (A == std::string(B)) return RETURN_TRUE;
	size_a = A.size();
	while (B[size_b] != 0) size_b++;
	if(size_a != size_b) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Посимвольная проверка
	//------------------------------------------------------------------------------------------------------------------------------------------
	for (i = RETURN_OK; i < size_a; i++) if (toupper(A[i]) != toupper(B[i])) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_TRUE;
}

bool CompareText(const char * A, std::string B)
//==============================================================================================================================================
//  Функция	CompareText(std::string A, std::string B)
//==============================================================================================================================================
//  Функция сравнения текстов в двух переменных
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Первый сравниваемый текст
//	B	-	Второй сравниваемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: TRUE: Тексты идентичны; FALSE: Тексты не идентичны;
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "COMPARE TEXT:";
	size_t size_a = RETURN_OK, size_b = RETURN_OK, i = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка исходных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (B == std::string(A)) return RETURN_TRUE;
	size_b = B.size();
	while (A[size_a] != 0) size_a++;
	if (size_a != size_b) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Посимвольная проверка
	//------------------------------------------------------------------------------------------------------------------------------------------
	for (i = RETURN_OK; i < size_a; i++) if (toupper(A[i]) != toupper(B[i])) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_TRUE;
}

bool CompareText(const char * A, const char* B)
//==============================================================================================================================================
//  Функция	CompareText(std::string A, std::string B)
//==============================================================================================================================================
//  Функция сравнения текстов в двух переменных
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Первый сравниваемый текст
//	B	-	Второй сравниваемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: TRUE: Тексты идентичны; FALSE: Тексты не идентичны;
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "COMPARE TEXT:";
	size_t size_a = RETURN_OK, size_b = RETURN_OK, i = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка исходных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (A == B) return RETURN_TRUE;
	while (B[size_b] != 0) size_b++;
	while (A[size_a] != 0) size_a++;
	if (size_a != size_b) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Посимвольная проверка
	//------------------------------------------------------------------------------------------------------------------------------------------
	for (i = RETURN_OK; i < size_a; i++) if (toupper(A[i]) != toupper(B[i])) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_TRUE;
}


///==================================================================================================================================================================================
///	Преобразование символов
///==================================================================================================================================================================================

void ToUpper(std::string &A)
//==============================================================================================================================================
//  Программа ToUpper(std::string &A)
//==============================================================================================================================================
//  Программа перевода текста в верхний регистр
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "UPPER:";
	size_t i = RETURN_OK, size = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	size = A.size();
	for (i = RETURN_OK; i < size; i++) A[i] = char(toupper(A[i]));

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void ToLower(std::string &A)
//==============================================================================================================================================
//  Программа ToLower(std::string &A)
//==============================================================================================================================================
//  Программа перевода текста в нижний регистр
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "LOWER:";
	size_t i = RETURN_OK, size = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	size = A.size();
	for (i = RETURN_OK; i < size; i++) A[i] = char(tolower(A[i]));

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void ToUpper(char * A)
//==============================================================================================================================================
//  Программа ToUpper(char * A)
//==============================================================================================================================================
//  Программа перевода текста в верхний регистр
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "UPPER:";
	size_t i = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	while (A[i] != 0) { 
		A[i] = char(toupper(A[i]));
		i++; }

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void ToLower(char * A)
//==============================================================================================================================================
//  Программа ToLower(char * A)
//==============================================================================================================================================
//  Программа перевода текста в нижний регистр
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "UPPER:";
	size_t i = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	while (A[i] != 0) {
		A[i] = char(tolower(A[i]));
		i++; }

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}


///==================================================================================================================================================================================
///	Удаление символов
///==================================================================================================================================================================================

void ClearText(std::string &A)
//==============================================================================================================================================
//  Программа ClearText(std::string &A)
//==============================================================================================================================================
//  Программа очистки текста
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CLEAR TEXT:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	A.clear();

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void ClearSpace(std::string &A)
//==============================================================================================================================================
//  Программа	ClearSpace(std::string &A)
//==============================================================================================================================================
//  Программа удаления пробелов из текста
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CLEAR SPACE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	for (size_t i = 0; i < A.size(); i++) {
		if (A[i] == ' ') {
			A.erase(i, 1);
			i--; }
	}

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void DelSpace(std::string &A)
//==============================================================================================================================================
//  Программа DelSpace(std::string &A)
//==============================================================================================================================================
//  Программа удаления пробелов из текста
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "DEL SPACE:";


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	for (size_t i = 0; i < A.size(); i++) {
		if (A[i] == ' ') {
			A.erase(i, 1);
			i--;
		}
	}

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void ClearText(char* A)
//==============================================================================================================================================
//  Программа	ClearText(char* A)
//==============================================================================================================================================
//  Программа очистки текста
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CLEAR TEXT:";
	size_t i = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	while (A[i] != 0) {
		A[i] = 0;
		i++; }

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void ClearSpace(char* A)
//==============================================================================================================================================
//  Программа	ClearSpace(char* A)
//==============================================================================================================================================
//  Программа удаления пробелов из текста
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CLEAR SPACE:";

	size_t i = RETURN_OK, Count = RETURN_OK;
	std::string Template;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	Template.clear();
	while (A[i] != 0) {
		if (A[i] != 32) {
			Template[Count] = A[i];
			Count++; }
		i++; }
	A = (char*)Template.c_str();

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}

void DelSpace(char* A)
//==============================================================================================================================================
//  Программа	DelSpace(char* A)
//==============================================================================================================================================
//  Программа удаления пробелов из текста
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	A	-	Преобразуемый текст
//==============================================================================================================================================
//  Возвращаемое значение функции: 
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "DEL SPACE:";

	size_t i = RETURN_OK, Count = RETURN_OK;
	std::string Template;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Преобразование текста
	//------------------------------------------------------------------------------------------------------------------------------------------
	Template.clear();
	while (A[i] != 0) {
		if (A[i] != 32) {
			Template[Count] = A[i];
			Count++; }
		i++; }
	A = (char*) Template.c_str();

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return;
}


///==================================================================================================================================================================================
///	Преобразование числа в шестнадцатеричную строку
///==================================================================================================================================================================================

template <typename T> std::string HexToStringTemplate(T Number, int len)
//==============================================================================================================================================
//  Функция HexToStringTemplate(T Number, int len)
//==============================================================================================================================================
//  Шаблон функции для преобразования числа в шестнадцатеричную строку
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	Преобразуемое число
//	len		-	Длина строки
//==============================================================================================================================================
//  Возвращаемое значение функции: Строка
//==============================================================================================================================================
//  Дата: 24.10.2020
//==============================================================================================================================================
//  Последнее обновление:   24.10.2020  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "HEX TO STRING TEMPLATE:";

	size_t i = RETURN_OK, j = RETURN_OK;
	static const char* digits = "0123456789ABCDEF";
	std::string rc(len, '0');

	for (i = 0, j = (len - 1) * 4; i < size_t(len); ++i, j -= 4) rc[i] = digits[(Number >> j) & 0x0F];
	rc = "0x" + rc;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return rc;
}

std::string HexToString(long Number, int len)
{ return HexToStringTemplate(Number, len); }

std::string HexToString(int8_t Number, int len)
{ return HexToStringTemplate(Number, len); }

std::string HexToString(int16_t Number, int len)
{ return HexToStringTemplate(Number, len); }

std::string HexToString(int32_t Number, int len)
{ return HexToStringTemplate(Number, len); }

#ifdef WINDOWS_COMPILER
	std::string HexToString(int64_t Number, int len)
{ return HexToStringTemplate(Number, len); }
#endif

std::string HexToString(uint8_t Number, int len)
{ return HexToStringTemplate(Number, len); }

std::string HexToString(uint16_t Number, int len)
{ return HexToStringTemplate(Number, len); }

std::string HexToString(uint32_t Number, int len)
{ return HexToStringTemplate(Number, len); }

std::string HexToString(uint64_t Number, int len)
{ return HexToStringTemplate(Number, len); }


template <typename T> char* HexToCharTemplate(T Number, int len)
//==============================================================================================================================================
//  Функция HexToCharTemplate(T Number, int len)
//==============================================================================================================================================
//  Шаблон функции для преобразования числа в шестнадцатеричную текстовую строку
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	Преобразуемое число
//	len		-	Длина строки
//==============================================================================================================================================
//  Возвращаемое значение функции: Строка
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "HEX TO CHAR TEMPLATE:";

	size_t i = RETURN_OK, j = RETURN_OK;
	static const char* digits = "0123456789ABCDEF";
	std::string rc(len, '0');

	for (i = 0, j = (len - 1) * 4; i < size_t(len); ++i, j -= 4) rc[i] = digits[(Number >> j) & 0x0F];
	rc = "0x" + rc;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return (char*) rc.c_str();
}

char* HexToChar(long Number, int len)
{ return HexToCharTemplate(Number, len); }

char* HexToChar(int8_t Number, int len)
{ return HexToCharTemplate(Number, len); }

char* HexToChar(int16_t Number, int len)
{ return HexToCharTemplate(Number, len); }

char* HexToChar(int32_t Number, int len)
{ return HexToCharTemplate(Number, len); }

#ifdef WINDOWS_COMPILER
	char* HexToChar(int64_t Number, int len)
{ return HexToCharTemplate(Number, len); }
#endif

char* HexToChar(uint8_t Number, int len)
{ return HexToCharTemplate(Number, len); }

char* HexToChar(uint16_t Number, int len)
{ return HexToCharTemplate(Number, len); }

char* HexToChar(uint32_t Number, int len)
{ return HexToCharTemplate(Number, len); }

char* HexToChar(uint64_t Number, int len)
{ return HexToCharTemplate(Number, len); }


///==================================================================================================================================================================================
///	Преобразование числа в восьмеричную строку
///==================================================================================================================================================================================

template <typename T> std::string OctToStringTemplate(T Number, int len)
//==============================================================================================================================================
//  Функция OctToStringTemplate(T Number, int len)
//==============================================================================================================================================
//  Шаблон функции для преобразования числа в восьмеричную строку
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	Преобразуемое число
//	len		-	Длина строки
//==============================================================================================================================================
//  Возвращаемое значение функции: Строка
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "OCT TO STRING TEMPLATE:";

	int	i = RETURN_OK;
	T place = RETURN_DATA, remainder = RETURN_OK, octal = RETURN_OK;
	std::string data;

	while (Number != 0) {
		remainder = Number % 8;
		Number /= 8;
		octal += remainder * place;
		place *= 10; }

	data = std::to_string(octal);
	for (i = data.size(); i < len; i++) data = '0' + data;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return data;
}

std::string OctToString(long Number, int len)
{ return OctToStringTemplate(Number, len); }

std::string OctToString(int8_t Number, int len)
{ return OctToStringTemplate(Number, len); }

std::string OctToString(int16_t Number, int len)
{ return OctToStringTemplate(Number, len); }

std::string OctToString(int32_t Number, int len)
{ return OctToStringTemplate(Number, len); }

#ifdef WINDOWS_COMPILER
	std::string OctToString(int64_t Number, int len)
{ return OctToStringTemplate(Number, len); }
#endif

std::string OctToString(uint8_t Number, int len)
{ return OctToStringTemplate(Number, len); }

std::string OctToString(uint16_t Number, int len)
{ return OctToStringTemplate(Number, len); }

std::string OctToString(uint32_t Number, int len)
{ return OctToStringTemplate(Number, len); }

std::string OctToString(uint64_t Number, int len)
{ return OctToStringTemplate(Number, len); }


template <typename T> char* OctToCharTemplate(T Number, int len)
//==============================================================================================================================================
//  Функция OctToCharTemplate(T Number, int len)
//==============================================================================================================================================
//  Шаблон функции для преобразования числа в текстовую восьмеричную строку
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	Преобразуемое число
//	len		-	Длина строки
//==============================================================================================================================================
//  Возвращаемое значение функции: Строка
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "OCT TO CHAR TEMPLATE:";

	int	i = RETURN_OK;
	T place = RETURN_DATA, remainder = RETURN_OK, octal = RETURN_OK;
	std::string data;

	while (Number != 0) {
		remainder = Number % 8;
		Number /= 8;
		octal += remainder * place;
		place *= 10;
	}

	data = std::to_string(octal);
	for (i = data.size(); i < len; i++) data = '0' + data;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return (char*) data.c_str();
}

char* OctToChar(long Number, int len)
{ return OctToCharTemplate(Number, len); }

char* OctToChar(int8_t Number, int len)
{ return OctToCharTemplate(Number, len); }

char* OctToChar(int16_t Number, int len)
{ return OctToCharTemplate(Number, len); }

char* OctToChar(int32_t Number, int len)
{ return OctToCharTemplate(Number, len); }

#ifdef WINDOWS_COMPILER
	char* OctToChar(int64_t Number, int len)
{ return OctToCharTemplate(Number, len); }
#endif

char* OctToChar(uint8_t Number, int len)
{ return OctToCharTemplate(Number, len); }

char* OctToChar(uint16_t Number, int len)
{ return OctToCharTemplate(Number, len); }

char* OctToChar(uint32_t Number, int len)
{ return OctToCharTemplate(Number, len); }

char* OctToChar(uint64_t Number, int len)
{ return OctToCharTemplate(Number, len); }


///==================================================================================================================================================================================
///	Преобразование числа в двоичную строку
///==================================================================================================================================================================================

template <typename T> std::string BinToStringTemplate(T Number, int len)
//==============================================================================================================================================
//  Функция BinToStringTemplate(T Number, int len)
//==============================================================================================================================================
//  Шаблон функции для преобразования двоичного числа в строку
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	Преобразуемое число
//	len		-	Длина строки
//==============================================================================================================================================
//  Возвращаемое значение функции: Строка
//==============================================================================================================================================
//  Дата: 24.10.2020
//==============================================================================================================================================
//  Последнее обновление:   24.10.2020  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "BIN TO STRING TEMPLATE:";
	std::string result = "";

	for (int i = 0; i < len; i++) result = (((Number & (uint64_t(1) << i)) != 0) == 0 ? "0" : "1") + result;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return result;
}

std::string BinToString(long Number, int len)
{ return BinToStringTemplate(Number, len); }

std::string BinToString(int8_t Number, int len)
{ return BinToStringTemplate(Number, len); }

std::string BinToString(int16_t Number, int len)
{ return BinToStringTemplate(Number, len); }

std::string BinToString(int32_t Number, int len)
{ return BinToStringTemplate(Number, len); }

#ifdef WINDOWS_COMPILER
	std::string BinToString(int64_t Number, int len)
{ return BinToStringTemplate(Number, len); }
#endif

std::string BinToString(uint8_t Number, int len)
{ return BinToStringTemplate(Number, len); }

std::string BinToString(uint16_t Number, int len)
{ return BinToStringTemplate(Number, len); }

std::string BinToString(uint32_t Number, int len)
{ return BinToStringTemplate(Number, len); }

std::string BinToString(uint64_t Number, int len)
{ return BinToStringTemplate(Number, len); }


template <typename T> char* BinToCharTemplate(T Number, int len)
//==============================================================================================================================================
//  Функция BinToCharTemplate(T Number, int len)
//==============================================================================================================================================
//  Шаблон функции для преобразования двоичного числа в текстовую строку
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	Number	-	Преобразуемое число
//	len		-	Длина строки
//==============================================================================================================================================
//  Возвращаемое значение функции: Строка
//==============================================================================================================================================
//  Дата: 12.06.2021
//==============================================================================================================================================
//  Последнее обновление:   12.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "BIN TO CHAR TEMPLATE:";
	std::string result = "";

	for (int i = 0; i < len; i++) result = (((Number & (uint64_t(1) << i)) != 0) == 0 ? "0" : "1") + result;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return (char*) result.c_str();
}

char* BinToChar(long Number, int len)
{ return BinToCharTemplate(Number, len); }

char* BinToChar(int8_t Number, int len)
{ return BinToCharTemplate(Number, len); }

char* BinToChar(int16_t Number, int len)
{ return BinToCharTemplate(Number, len); }

char* BinToChar(int32_t Number, int len)
{ return BinToCharTemplate(Number, len); }

#ifdef WINDOWS_COMPILER
	char* BinToChar(int64_t Number, int len)
{ return BinToCharTemplate(Number, len); }
#endif

char* BinToChar(uint8_t Number, int len)
{ return BinToCharTemplate(Number, len); }

char* BinToChar(uint16_t Number, int len)
{ return BinToCharTemplate(Number, len); }

char* BinToChar(uint32_t Number, int len)
{ return BinToCharTemplate(Number, len); }

char* BinToChar(uint64_t Number, int len)
{ return BinToCharTemplate(Number, len); }


///==================================================================================================================================================================================
///	Операции с IP адресом
///==================================================================================================================================================================================

bool CheckPartIP(std::string partIP)
//==============================================================================================================================================
//  Функция	CheckPartIP(std::string partIP)
//==============================================================================================================================================
//  Функция проверки части IP адреса
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	partIP	-	Секция IP адреса
//==============================================================================================================================================
//  Возвращаемое значение функции: TRUE: Корректная секция; FALSE: Некорректная секция;
//==============================================================================================================================================
//  Дата: 13.06.2021
//==============================================================================================================================================
//  Последнее обновление:   13.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CHECK PART IP:";
	int Group = RETURN_OK;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка IP группы
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (partIP.size() < RETURN_OK || partIP.size() > 3) return RETURN_FALSE;
	try { Group = stoi(partIP); }
	catch (...) { return RETURN_FALSE; }
	if (Group < RETURN_OK || Group > 255) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_TRUE;
}

bool CheckIPaddress(std::string IP)
//==============================================================================================================================================
//  Функция CheckIPaddress(std::string IP)
//==============================================================================================================================================
//  Функция проверки IP адреса
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	IP	-	IP адрес
//==============================================================================================================================================
//  Возвращаемое значение функции: TRUE: Корректный адрес; FALSE: Некорректный адрес;
//==============================================================================================================================================
//  Дата: 13.06.2021
//==============================================================================================================================================
//  Последнее обновление:   13.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CHECK IP ADDRESS:";

	size_t size = RETURN_OK, i = RETURN_OK;
	int Count = RETURN_OK;
	std::string group;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Начальная проверка IP адреса
	//------------------------------------------------------------------------------------------------------------------------------------------
	if (IP[0] == '0' || IP[0] == '.')  return RETURN_FALSE;
	size = IP.size();
	if (size < 3 || size > 15) return RETURN_FALSE;
	for (i = RETURN_OK; i < size; i++) if (IP[i] != '.' && (IP[i] < '0' || IP[i] > '9')) return RETURN_FALSE;
	for (i = RETURN_OK; i < size; i++) if (IP[i] == '.') Count++;
	if (Count != 3) return RETURN_FALSE;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка IP адреса по рруппам
	//------------------------------------------------------------------------------------------------------------------------------------------
	group.clear();
	for (i = RETURN_OK; i < size; i++) {
		if (IP[i] >= '0' && IP[i] <= '9') group = group + IP[i];
		if (IP[i] == '.' || i == (size - 1)) {
			if (CheckPartIP(group) == RETURN_FALSE) return RETURN_FALSE;
			group.clear(); }
	}

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_TRUE;
}

bool CheckIPaddress(const char * IP)
{ return CheckPartIP(std::string(IP)); }


template <typename T> int ConvertIPTemplate(T IP, std::string &address)
//==============================================================================================================================================
//  Функция ConvertIPTemplate(T IP, std::string &address)
//==============================================================================================================================================
//  Шаблон функции для преобразования числа в IP адрес
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	IP		-	Численное значение адреса
//	address	-	IP адрес
//==============================================================================================================================================
//  Возвращаемое значение функции: -1: Ошибка преобразования адреса; 0: Адрес не получен; 1: Адрес получен;
//==============================================================================================================================================
//  Дата: 13.06.2021
//==============================================================================================================================================
//  Последнее обновление:   13.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CONVERT IP TEMPLATE:";
	uint64_t Mask = 0xFF;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Проверка входных данных
	//------------------------------------------------------------------------------------------------------------------------------------------
	address.clear();
	if (IP < RETURN_OK || IP > 0xFFFFFFFF) return RETURN_ERROR;

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Получение IP адреса
	//------------------------------------------------------------------------------------------------------------------------------------------
	for (int i = 3; i > RETURN_ERROR; i--) {
		address = address + std::to_string((IP & (Mask << 8 * i)) >> 8 * i);
		if (i != RETURN_OK) address = address + '.'; }

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return RETURN_DATA;
}

int ConvertIP(long IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }

int ConvertIP(int8_t IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }

int ConvertIP(int16_t IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }

int ConvertIP(int32_t IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }

#ifdef WINDOWS_COMPILER
	int ConvertIP(int64_t IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }
#endif

int ConvertIP(uint8_t IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }

int ConvertIP(uint16_t IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }

int ConvertIP(uint32_t IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }

int ConvertIP(uint64_t IP, std::string &address)
{ return ConvertIPTemplate(IP, address); }


template <typename T> int ConvertIPCharTemplate(T IP, char *address)
//==============================================================================================================================================
//  Функция ConvertIPCharTemplate(T IP, char *address)
//==============================================================================================================================================
//  Шаблон функции для преобразования числа в IP адрес
//==============================================================================================================================================
//  Переменные:
//----------------------------------------------------------------------------------------------------------------------------------------------
//	IP		-	Численное значение адреса
//	address	-	IP адрес
//==============================================================================================================================================
//  Возвращаемое значение функции: -1: Ошибка преобразования адреса; 0: Адрес не получен; 1: Адрес получен;
//==============================================================================================================================================
//  Дата: 13.06.2021
//==============================================================================================================================================
//  Последнее обновление:   13.06.2021  |
//==============================================================================================================================================
{
	std::string PROGRAM_NAME = "CONVERT IP CHAR TEMPLATE:";

	int Error = RETURN_OK;
	std::string Address;


	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Получение IP адреса
	//------------------------------------------------------------------------------------------------------------------------------------------
	Address = std::string(address);
	Error = ConvertIP(IP, Address);
	address = (char*) Address.c_str();

	//------------------------------------------------------------------------------------------------------------------------------------------
	//	Выход из программы
	//------------------------------------------------------------------------------------------------------------------------------------------
	return Error;
}

int ConvertIP(long IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }

int ConvertIP(int8_t IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }

int ConvertIP(int16_t IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }

int ConvertIP(int32_t IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }

#ifdef WINDOWS_COMPILER
	int ConvertIP(int64_t IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }
#endif

int ConvertIP(uint8_t IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }

int ConvertIP(uint16_t IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }

int ConvertIP(uint32_t IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }

int ConvertIP(uint64_t IP, char* address)
{ return ConvertIPCharTemplate(IP, address); }


///==================================================================================================================================================================================
///	Конец файла
///==================================================================================================================================================================================
